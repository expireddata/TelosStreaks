{"version":3,"sources":["calc/index.js","App.js","serviceWorker.js","index.js"],"names":["enrIncrease","roll","Math","random","find","x","Input","styled","input","App","div","React","useState","start","setStart","end","setEnd","lotd","setlotd","dropChance","streakObj","sumP","rollKill","enrage","streak","killChance","sumKills","trials","p","current","divisor","floor","perKill","pow","streakChance","toFixed","className","type","placeholder","value","onChange","e","target","checked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAIMA,G,MAAc,WAChB,IAEMC,EAAOC,KAAKC,SAElB,MAJiB,CAAC,CAAC,KAAM,GAAI,CAAC,KAAO,GAAI,CAAC,KAAO,GAAI,CAAC,KAAO,IAAK,CAAC,KAAO,IAAK,CAAC,IAAM,IAAK,CAAC,KAAO,IAAK,CAAC,KAAO,IAAK,CAAC,KAAO,IAAK,CAAC,KAAO,IAAK,CAAC,IAAO,IAAK,CAAC,KAAO,IAAK,CAAC,IAAM,IAAK,CAAC,EAAG,KAIzKC,MAAK,SAAAC,GAAC,OAAIJ,GAAQI,EAAE,MAAI,K,uNCJ5C,IAAMC,EAAQC,IAAOC,MAAV,KA+BIC,GA1BIF,IAAOG,IAAV,KAIJ,WAAO,IAAD,EACUC,IAAMC,SAAS,IADzB,mBACTC,EADS,KACFC,EADE,OAEMH,IAAMC,SAAS,IAFrB,mBAETG,EAFS,KAEJC,EAFI,OAGQL,IAAMC,UAAS,GAHvB,mBAGTK,EAHS,KAGHC,EAHG,KAKZC,EAAa,GAEjB,GAAa,KAAVN,GAAwB,KAARE,EAAW,CAC5B,IAAMK,EDVW,SAACP,EAAOE,EAAKE,GAI9B,IAHA,IAAII,EAAO,EACLC,EAZS,SAACL,GAAD,OAAU,SAACM,EAAQC,GAAT,OAAoB,KAAS,GAAK,KAAQD,EAAS,GAAGN,GAAQ,EAAIO,IAY1EC,CAAWR,GACxBS,EAAW,EACPC,EAAS,EAAGA,EAhBH,IAgB0BA,IAAU,CAGjD,IAFA,IAAIC,EAAI,EACJJ,EAAS,EACLK,EAAUhB,EAAOgB,GAAWd,EAAKc,GAAW7B,IAAe,CAC/D,IAAI8B,EAAUR,EAASO,IAAWL,GAE/BK,EAAU,MACTC,GAAW,IAGXD,EAAU,KACVC,GAAW,GAIfF,GADY,EAAK,EAAI1B,KAAK6B,MAAMD,GAEhCJ,IAGJL,GAAQO,EAGZ,MAAO,CAACA,EAAG,EAAKP,EAtCC,IAsCqBW,QAAS,GAAK,EAAI9B,KAAK+B,IAAKZ,EAtCjD,QAsCsFK,KChBrFQ,EAAcrB,GAAQE,EAAKE,GACxCW,EAAcR,EAAdQ,EAAGI,EAAWZ,EAAXY,QACPb,EAAa,oCAAE,2DAA6BS,EAAEO,QAAQ,GAAvC,sBAAuD,EAAEP,GAAGO,QAAQ,GAApE,cAAwF,2FAA6DH,EAAQG,QAAQ,MAEvL,OACE,yBAAKC,UAAU,OACb,kBAAC9B,EAAD,CAAO+B,KAAK,SAASC,YAAY,kBAAkBC,MAAO1B,EAAO2B,SAAU,SAACC,GAAD,OAAO3B,EAAS2B,EAAEC,OAAOH,UACpG,kBAACjC,EAAD,CAAO+B,KAAK,SAASC,YAAY,gBAAgBC,MAAOxB,EAAKyB,SAAU,SAACC,GAAD,OAAOzB,EAAOyB,EAAEC,OAAOH,UAC9F,sCAAW,2BAAOF,KAAK,WAAWE,MAAOtB,EAAMuB,SAAU,SAACC,GAAD,OAAOvB,EAAQuB,EAAEC,OAAOC,aACjF,6BAAMxB,MCnBQyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd0ed1af.chunk.js","sourcesContent":["const TRIAL_NUMBER = 10000; //sample accuracy for streaks\r\n\r\nconst killChance = (lotd) => (enrage, streak) => 10000 / (10 + 0.25 * (enrage + 25*lotd) + 3 * streak);\r\n\r\nconst enrIncrease = () => { \r\n    const cumProbs = [[0.012,5], [0.104, 8], [0.226, 9], [0.474, 10], [0.623, 11], [0.72, 12], [0.805, 13], [0.867, 14], [0.915, 15], [0.942, 16], [0.960, 17], [0.977, 18], [0.99, 19], [1, 20]];\r\n\r\n    const roll = Math.random();\r\n\r\n    return cumProbs.find(x => roll <= x[0])[1];\r\n}\r\n\r\nconst streakChance = (start, end, lotd) => { \r\n    let sumP = 0.0; \r\n    const rollKill = killChance(lotd);\r\n    let sumKills = 0; \r\n    for(let trials = 0; trials < TRIAL_NUMBER; trials++) { \r\n        let p = 1.0; \r\n        let streak = 0;\r\n        for(let current = start; current <= end; current += enrIncrease()) { \r\n            let divisor = rollKill(current, ++streak); \r\n            \r\n            if(current < 100) {\r\n                divisor *= 10; //Silver tier or lower\r\n            } \r\n            \r\n            if (current < 25) { \r\n                divisor *= 3; //Bronze tier\r\n            }\r\n\r\n            let killP = 1 - (1 / Math.floor(divisor)); \r\n            p *= killP; \r\n            sumKills++;\r\n        }\r\n\r\n        sumP += p; \r\n    }\r\n\r\n    return {p: 1 - (sumP / TRIAL_NUMBER), perKill: 1 / (1 - Math.pow((sumP / TRIAL_NUMBER), TRIAL_NUMBER / sumKills)) };\r\n}\r\n\r\nexport { killChance, enrIncrease, streakChance }","import React from 'react';\nimport './App.css';\nimport { streakChance } from \"./calc\";\nimport styled from \"styled-components\"; \n\nconst Input = styled.input`\n  display: inline-block; \n  margin: 20px;\n`\n\nconst StyledForm = styled.div`\n  text-align: center\n`\n\nconst App = () => {\n  const [start, setStart] = React.useState(\"\"); \n  const [end, setEnd] = React.useState(\"\");\n  const [lotd, setlotd] = React.useState(false);\n  \n  let dropChance = \"\"; \n\n  if(start !== \"\" && end !== \"\"){ \n    const streakObj = streakChance(+start, +end, lotd);\n    let {p, perKill} = streakObj; \n     dropChance = <><div>{`Your drop chance is ${p.toFixed(6)}, or 1 in ${(1/p).toFixed(3)} streaks.`}</div><div>{`Your average chance per kill on this streak is 1 in ${perKill.toFixed(3)}`}</div></>;\n  }\n  return (\n    <div className=\"App\">\n      <Input type=\"number\" placeholder=\"Starting Enrage\" value={start} onChange={(e) => setStart(e.target.value)} />\n      <Input type=\"number\" placeholder=\"Ending Enrage\" value={end} onChange={(e) => setEnd(e.target.value)} />\n      <div>Lotd: <input type=\"checkbox\" value={lotd} onChange={(e) => setlotd(e.target.checked)} /></div>\n      <div>{dropChance}</div> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}